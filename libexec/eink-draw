#!/usr/bin/env node

const fs = require('fs')
const PNG = require('png-js');

// const { createCanvas, loadImage } = require('canvas')
var XMLHttpRequest = require('xhr2');
const width = 1304
const height = 984

const img_path = process.argv[2] || '/tmp/eink.png';

function decode(path) {
  return new Promise(resolve => {
    PNG.decode(path, response => resolve(response));
  });
}

;(async () => {

    var imagex = 1304
    var imagey = 984

    // const canvas = createCanvas(width, height)
    // const img = await loadImage(img_path)
    // canvas.getContext('2d').drawImage(img, 0, 0)
    // var data = canvas.getContext('2d').getImageData(0, 0, imagex, imagey).data;
    let data = await decode(img_path);
    //Convert rgb888 image to black and white with 1bit = 1pixel
    //XXX
    var blackimgbit = new Array(imagex * imagey);
    var ryimgbit = new Array(imagex * imagey);
    for (var i = 0; i < imagex * imagey; i++) {
        blackimgbit[i] = 1;
        ryimgbit[i] = 1;
    }    
    for (var i = 0; i < imagex * imagey; i++) {
        // for (var i = 0; i < 240; i++) {
        if (data[4 * i + 3] != 0) {
            if (data[4 * i] == 0 && data[4 * i + 1] == 0 && data[4 * i + 2] == 0) {// black
                blackimgbit[i] = 0;
            } else if(!(data[4 * i] == 255 && data[4 * i + 1] == 255 && data[4 * i + 2] == 255)){// Non-white, red or yellow
                ryimgbit[i] = 0;
            }
        }
    }
    //Convert 4bit to characters, 0000-1111 to a-p for easy sending
    var xstr = ((imagex % 4 == 0)? (imagex / 4): (imagex / 4 + 1));
    var ystr = imagey;
    var bimg = new Array(xstr * ystr);
    var ryimg = new Array(xstr * ystr);
    for (var i = 0; i < xstr * ystr; i++) {
        bimg[i] = 0x00;
        ryimg[i] = 0x00;
    }    
    var x = 0, j = 0;
    bimgMsg = '';
    ryimgMsg = '';
    for (var i = 0; i < imagex * imagey; i++) {
        // for (var i = 0; i < 240; i++) {
        bimg[x] +=   blackimgbit[i]<< (3 - j);
        ryimg[x] +=  ryimgbit[i]<< (3 - j);
        j = j + 1;
        if(j == 4){
            j = 0;
            bimgMsg += String.fromCharCode(bimg[x] + 97);
            ryimgMsg += String.fromCharCode(ryimg[x] + 97);
            x++;
        }
    }
    bimgm1s1m2s2='';
    ryimgm1s1m2s2='';
    for(var i = 0; i < 492; i++){
        bimgm1s1m2s2 += bimgMsg.substr(i * 326, 162);
        ryimgm1s1m2s2 += ryimgMsg.substr(i * 326, 162);
    }
    for(var i = 0; i < 492; i++){
        bimgm1s1m2s2 += bimgMsg.substr(i * 326 + 162, 164);
        ryimgm1s1m2s2 += ryimgMsg.substr(i * 326 + 162, 164);
    }
    for(var i = 492; i < 984; i++){
        bimgm1s1m2s2 += bimgMsg.substr(i * 326, 162);
        ryimgm1s1m2s2 += ryimgMsg.substr(i * 326, 162);
    }
    for(var i = 492; i < 984; i++){
        bimgm1s1m2s2 += bimgMsg.substr(i * 326 + 162, 164);
        ryimgm1s1m2s2 += ryimgMsg.substr(i * 326 + 162, 164);
    }
    //Send 30,000 characters at a time, and more may fail
    var Btime = Math.ceil(bimgm1s1m2s2.length/30000);//Rounded up
    var RYtime = Math.ceil(ryimgm1s1m2s2.length/30000);
    // consoledebug('alltime = ' + Btime);
    
    var bnext =  0, rynext = 0;
    var show = 0;
    // consoledebug('bimgm1s1m2s2 = ' + bimgm1s1m2s2.substr(bnext*30000,30000));
    var url = 'http://192.168.130.30/';

    xmlHttp = new XMLHttpRequest();
    xmlHttp.open('POST', url + 'EPD', true); 
    xmlHttp.send('12.48inch e-Paper (B)');
    xmlHttp.onload = xmlHttp.onerror = function () {
        // console.log(xmlHttp.status);        //black
        if (xmlHttp.status==200  && bnext<Btime) {
            // console.log('LOAD A:' + bnext + ', len = ' + bimgm1s1m2s2.substr(bnext*30000,30000).length)
            xmlHttp.open('POST', url + 'LOADA', true); 
            xmlHttp.send(bimgm1s1m2s2.substr(bnext*30000,30000));
        }
        bnext++;
        // console.log(bnext);
        //red
        if (xmlHttp.status==200 && bnext>Btime && rynext<RYtime) {
            // console.log('LOAD B:' + rynext + ', len = ' + ryimgm1s1m2s2.substr(rynext*30000,30000).length)
            xmlHttp.open('POST', url + 'LOADB', true); 
            xmlHttp.send(ryimgm1s1m2s2.substr(rynext*30000,30000));
        }
        if(bnext>Btime)// r/b/w
            rynext++;
        //SHOW
        if(xmlHttp.status==200 && rynext>RYtime && show==0){
            // console.log('SHOW');
            xmlHttp.open('POST', url + 'SHOW', true); 
            xmlHttp.send('12.48inch e-Paper (B)');
            show = 1;
        }
    };

})();

